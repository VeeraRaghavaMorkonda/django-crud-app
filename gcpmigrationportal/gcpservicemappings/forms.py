from django import forms  
from gcpservicemappings.models import ServiceMappingModel  
class ServiceMappingForm(forms.ModelForm):  
    class Meta:  
        model = ServiceMappingModel  
        fields = ['app_id',
                    'app_name', 
                    'pdo', 
                    'sla', 
                    'cia',
                    'current_state_tech_stack', 
                    'future_state_tech_stack',
                    'migration_roadmap', 
                    'current_state_db',                     
                    'in_scope', 
                    'architecture_type',
                    'external_load_balancer', 
                    'internal_load_balancer', 
                    'apigee',
                    'cloud_armor',
                    'cloud_dns', 
                    'cloud_run', 
                    'gcp_caas', 
                    'onprem_caas', 
                    'compute_engine',
                    'cloud_function',
                    'cloud_storage',
                    'pub_sub',
                    'cloudsql_mssql_se',
                    'cloudsql_mssql_ee',
                    'cloudsql_pg',
                    'onprem_db',
                    'big_query',
                    'cloud_scheduler',
                    'memory_store',
                    'cloud_monitoring',
                    'cloud_logging',
                    'secret_manager',
                    'fire_store',
                    'data_flow',
                    'mongo_db_atlas',
                    'cloud_build',
                    'adfs',
                    'azure_ad',
                    'no_of_cloud_run_ms',
                    'deployment_topology',
                    'deployment_topology_tobedeleted',
                    'availability',
                    'downtime',
                    'remarks',
                    'comparision_notes',
                    'verification',
                    'business_value',
                    'business_remarks',
                    'planned_launch_date',
                    'devsecops_pipeline',
                    'app_pipeline',
                    'iac_pipeline',                   
                    'fossa',
                    'checkmarx',
                    'cycode',
                    'sonarqube',                    
                    'crunch_42',
                    'automated_testing_before_deploy',
                    'automated_testing_after_deploy',
                    'monitoring',
                    'sre',
                    'deviation',
                    'target_db',
                    'migration_scope',
                    'migration_category',
                    ] 
        widgets = { 'app_id': forms.NumberInput(attrs={ 'class': 'form-control' }),
                    'app_name': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'pdo': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'sla': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'cia': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'current_state_tech_stack': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'future_state_tech_stack': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'migration_roadmap': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'current_state_db': forms.TextInput(attrs={ 'class': 'form-control' }), 
                    'in_scope': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'architecture_type': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'external_load_balancer': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'internal_load_balancer': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'apigee': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'cloud_armor': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'cloud_dns': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'cloud_run': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'gcp_caas': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'onprem_caas': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'compute_engine': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'cloud_function': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'cloud_storage': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'pub_sub' : forms.TextInput(attrs={ 'class': 'form-control' }),
                    'cloudsql_mssql_se': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'cloudsql_mssql_ee': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'cloudsql_pg': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'onprem_db': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'big_query': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'cloud_scheduler': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'memory_store': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'cloud_monitoring': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'cloud_logging': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'secret_manager': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'fire_store': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'data_flow': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'mongo_db_atlas': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'cloud_build': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'adfs': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'azure_ad': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'no_of_cloud_run_ms': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'deployment_topology': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'deployment_topology_tobedeleted': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'availability': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'downtime': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'remarks': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'comparision_notes': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'verification': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'business_value': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'business_remarks': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'planned_launch_date': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'devsecops_pipeline': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'app_pipeline': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'iac_pipeline': forms.TextInput(attrs={ 'class': 'form-control' }),                   
                    'fossa': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'checkmarx': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'cycode': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'sonarqube': forms.TextInput(attrs={ 'class': 'form-control' }),                    
                    'crunch_42': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'automated_testing_before_deploy': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'automated_testing_after_deploy': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'monitoring': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'sre': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'deviation': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'target_db': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'migration_scope': forms.TextInput(attrs={ 'class': 'form-control' }),
                    'migration_category': forms.TextInput(attrs={ 'class': 'form-control' }),                   
                    }